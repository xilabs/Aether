/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Aether_H
#define Aether_H

#include <thrift/TDispatchProcessor.h>
#include "aether_types.h"



class AetherIf {
 public:
  virtual ~AetherIf() {}
  virtual void get_moxel_snapshot(Space& _return) = 0;
};

class AetherIfFactory {
 public:
  typedef AetherIf Handler;

  virtual ~AetherIfFactory() {}

  virtual AetherIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AetherIf* /* handler */) = 0;
};

class AetherIfSingletonFactory : virtual public AetherIfFactory {
 public:
  AetherIfSingletonFactory(const boost::shared_ptr<AetherIf>& iface) : iface_(iface) {}
  virtual ~AetherIfSingletonFactory() {}

  virtual AetherIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AetherIf* /* handler */) {}

 protected:
  boost::shared_ptr<AetherIf> iface_;
};

class AetherNull : virtual public AetherIf {
 public:
  virtual ~AetherNull() {}
  void get_moxel_snapshot(Space& /* _return */) {
    return;
  }
};


class Aether_get_moxel_snapshot_args {
 public:

  Aether_get_moxel_snapshot_args() {
  }

  virtual ~Aether_get_moxel_snapshot_args() throw() {}


  bool operator == (const Aether_get_moxel_snapshot_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Aether_get_moxel_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Aether_get_moxel_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Aether_get_moxel_snapshot_pargs {
 public:


  virtual ~Aether_get_moxel_snapshot_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Aether_get_moxel_snapshot_result__isset {
  _Aether_get_moxel_snapshot_result__isset() : success(false), sunav(false) {}
  bool success;
  bool sunav;
} _Aether_get_moxel_snapshot_result__isset;

class Aether_get_moxel_snapshot_result {
 public:

  Aether_get_moxel_snapshot_result() {
  }

  virtual ~Aether_get_moxel_snapshot_result() throw() {}

  Space success;
  ServiceUnavailable sunav;

  _Aether_get_moxel_snapshot_result__isset __isset;

  void __set_success(const Space& val) {
    success = val;
  }

  void __set_sunav(const ServiceUnavailable& val) {
    sunav = val;
  }

  bool operator == (const Aether_get_moxel_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sunav == rhs.sunav))
      return false;
    return true;
  }
  bool operator != (const Aether_get_moxel_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Aether_get_moxel_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Aether_get_moxel_snapshot_presult__isset {
  _Aether_get_moxel_snapshot_presult__isset() : success(false), sunav(false) {}
  bool success;
  bool sunav;
} _Aether_get_moxel_snapshot_presult__isset;

class Aether_get_moxel_snapshot_presult {
 public:


  virtual ~Aether_get_moxel_snapshot_presult() throw() {}

  Space* success;
  ServiceUnavailable sunav;

  _Aether_get_moxel_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AetherClient : virtual public AetherIf {
 public:
  AetherClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AetherClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_moxel_snapshot(Space& _return);
  void send_get_moxel_snapshot();
  void recv_get_moxel_snapshot(Space& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AetherProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AetherIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AetherProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_moxel_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AetherProcessor(boost::shared_ptr<AetherIf> iface) :
    iface_(iface) {
    processMap_["get_moxel_snapshot"] = &AetherProcessor::process_get_moxel_snapshot;
  }

  virtual ~AetherProcessor() {}
};

class AetherProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AetherProcessorFactory(const ::boost::shared_ptr< AetherIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AetherIfFactory > handlerFactory_;
};

class AetherMultiface : virtual public AetherIf {
 public:
  AetherMultiface(std::vector<boost::shared_ptr<AetherIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AetherMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AetherIf> > ifaces_;
  AetherMultiface() {}
  void add(boost::shared_ptr<AetherIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_moxel_snapshot(Space& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_moxel_snapshot(_return);
    }
    ifaces_[i]->get_moxel_snapshot(_return);
    return;
  }

};



#endif
