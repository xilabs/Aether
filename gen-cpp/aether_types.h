/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef aether_TYPES_H
#define aether_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _ServiceUnavailable__isset {
  _ServiceUnavailable__isset() : error_code(false), error_message(false) {}
  bool error_code;
  bool error_message;
} _ServiceUnavailable__isset;

class ServiceUnavailable : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  ServiceUnavailable() : error_code(0), error_message() {
  }

  virtual ~ServiceUnavailable() throw() {}

  int32_t error_code;
  std::string error_message;

  _ServiceUnavailable__isset __isset;

  void __set_error_code(const int32_t val) {
    error_code = val;
  }

  void __set_error_message(const std::string& val) {
    error_message = val;
  }

  bool operator == (const ServiceUnavailable & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_message == rhs.error_message))
      return false;
    return true;
  }
  bool operator != (const ServiceUnavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceUnavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceUnavailable &a, ServiceUnavailable &b);

typedef struct _Vector__isset {
  _Vector__isset() : x(false), y(false), z(false) {}
  bool x;
  bool y;
  bool z;
} _Vector__isset;

class Vector {
 public:

  static const char* ascii_fingerprint; // = "EFFAD640FBA2CA56C50155B2A4545897";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

  Vector() : x(0), y(0), z(0) {
  }

  virtual ~Vector() throw() {}

  double x;
  double y;
  double z;

  _Vector__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const Vector & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Vector &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Vector & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Vector &a, Vector &b);

typedef struct _Moxel__isset {
  _Moxel__isset() : position(false) {}
  bool position;
} _Moxel__isset;

class Moxel {
 public:

  static const char* ascii_fingerprint; // = "4FE4B4C8952003BE2B266957AF72F8B4";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0xE4,0xB4,0xC8,0x95,0x20,0x03,0xBE,0x2B,0x26,0x69,0x57,0xAF,0x72,0xF8,0xB4};

  Moxel() {
  }

  virtual ~Moxel() throw() {}

  Vector position;

  _Moxel__isset __isset;

  void __set_position(const Vector& val) {
    position = val;
  }

  bool operator == (const Moxel & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    return true;
  }
  bool operator != (const Moxel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Moxel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Moxel &a, Moxel &b);

typedef struct _Space__isset {
  _Space__isset() : moxels(false) {}
  bool moxels;
} _Space__isset;

class Space {
 public:

  static const char* ascii_fingerprint; // = "25A3CDDFF8FCED7F1C79B8F32C3AAAD9";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0xA3,0xCD,0xDF,0xF8,0xFC,0xED,0x7F,0x1C,0x79,0xB8,0xF3,0x2C,0x3A,0xAA,0xD9};

  Space() {
  }

  virtual ~Space() throw() {}

  std::vector<Moxel>  moxels;

  _Space__isset __isset;

  void __set_moxels(const std::vector<Moxel> & val) {
    moxels = val;
  }

  bool operator == (const Space & rhs) const
  {
    if (!(moxels == rhs.moxels))
      return false;
    return true;
  }
  bool operator != (const Space &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Space & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Space &a, Space &b);



#endif
